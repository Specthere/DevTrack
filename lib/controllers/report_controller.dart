// controllers/report_controller.dart
import 'package:flutter/material.dart';
import '../models/report_model.dart';
import '../services/data_service.dart';

class ReportController extends ChangeNotifier {
  final DataService _dataService = DataService();
  
  List<Report> _reports = [];
  List<Report> _projectReports = [];
  bool _isLoading = false;
  bool _isSubmitting = false;
  String? _error;
  String? _submitMessage;

  // Getters
  List<Report> get reports => _reports;
  List<Report> get projectReports => _projectReports;
  bool get isLoading => _isLoading;
  bool get isSubmitting => _isSubmitting;
  String? get error => _error;
  String? get submitMessage => _submitMessage;

  // Load all reports
  Future<void> loadReports() async {
    _setLoading(true);
    _error = null;
    
    try {
      // Simulate API delay
      await Future.delayed(const Duration(milliseconds: 600));
      
      _reports = _dataService.getAllReports();
      notifyListeners();
    } catch (e) {
      _error = 'Gagal memuat laporan: ${e.toString()}';
      notifyListeners();
    } finally {
      _setLoading(false);
    }
  }

  // Load reports by project ID
  Future<void> loadProjectReports(int projectId) async {
    _setLoading(true);
    _error = null;
    
    try {
      // Simulate API delay
      await Future.delayed(const Duration(milliseconds: 500));
      
      _projectReports = _dataService.getReportsByProjectId(projectId);
      notifyListeners();
    } catch (e) {
      _error = 'Gagal memuat laporan proyek: ${e.toString()}';
      notifyListeners();
    } finally {
      _setLoading(false);
    }
  }

  // Submit new report
  Future<bool> submitReport({
    required int projectId,
    required String deskripsi,
    required String material,
    required int jumlahPekerja,
    String? kendala,
    String? foto,
    required String lokasi,
  }) async {
    _setSubmitting(true);
    _error = null;
    _submitMessage = null;
    
    try {
      // Simulate API delay
      await Future.delayed(const Duration(milliseconds: 1500));
      
      final report = Report(
        laporanId: 0, // Will be generated by service
        projectId: projectId,
        tanggal: DateTime.now().toIso8601String(),
        deskripsi: deskripsi,
        material: material,
        jumlahPekerja: jumlahPekerja,
        kendala: kendala?.isEmpty == true ? null : kendala,
        foto: foto,
        lokasi: lokasi,
      );

      bool success = _dataService.addReport(report);
      
      if (success) {
        _submitMessage = 'Laporan berhasil dikirim';
        // Refresh project reports if we're viewing them
        if (_projectReports.isNotEmpty && _projectReports.first.projectId == projectId) {
          _projectReports = _dataService.getReportsByProjectId(projectId);
        }
        // Refresh all reports
        _reports = _dataService.getAllReports();
        notifyListeners();
        return true;
      } else {
        _error = 'Gagal menyimpan laporan';
        notifyListeners();
        return false;
      }
    } catch (e) {
      _error = 'Terjadi kesalahan: ${e.toString()}';
      notifyListeners();
      return false;
    } finally {
      _setSubmitting(false);
    }
  }

  // Get recent reports
  List<Report> getRecentReports([int limit = 5]) {
    return _dataService.getRecentReports(limit);
  }

  // Get report by ID
  Report? getReportById(int reportId) {
    return _dataService.getReportById(reportId);
  }

  // Private methods
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setSubmitting(bool submitting) {
    _isSubmitting = submitting;
    notifyListeners();
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }

  void clearSubmitMessage() {
    _submitMessage = null;
    notifyListeners();
  }

  void clearProjectReports() {
    _projectReports = [];
    notifyListeners();
  }
}